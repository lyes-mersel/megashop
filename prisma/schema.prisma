generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  userId String @id @map("user_id") @db.VarChar(25)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("admin")
}

model Adresse {
  id         String     @id @default(cuid()) @db.VarChar(25)
  rue        String?    @db.VarChar(255)
  ville      String?    @db.VarChar(100)
  codePostal String?    @map("code_postal") @db.VarChar(20)
  pays       String?    @db.VarChar(100)
  commandes  Commande[]
  user       User[]

  @@map("adresse")
}

model Categorie {
  id          String    @id @default(cuid()) @db.VarChar(25)
  nom         String    @unique(map: "nom") @db.VarChar(100)
  description String?   @db.VarChar(255)
  produits    Produit[]

  @@map("categorie")
}

model Client {
  id           String        @id @db.VarChar(25)
  user         User          @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vendeur      Vendeur?
  commandes    Commande[]
  signalements Signalement[]

  @@map("client")
}

model Commande {
  id                String             @id @default(cuid()) @db.VarChar(25)
  date              DateTime?          @default(now()) @db.DateTime(0)
  montant           Decimal            @db.Decimal(10, 2)
  statut            CommandeStatut?    @default(EN_ATTENTE)
  adresseId         String?            @map("adresse_id") @db.VarChar(25)
  panierId          String?            @map("panier_id") @db.VarChar(25)
  clientId          String?            @map("client_id") @db.VarChar(25)
  adresse           Adresse?           @relation(fields: [adresseId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  panier            Panier?            @relation(fields: [panierId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  client            Client?            @relation(fields: [clientId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  lignesCommande    LigneCommande[]
  paiementsCommande PaiementCommande[]

  @@index([clientId], map: "index_client_id")
  @@index([panierId], map: "index_panier_id")
  @@map("commande")
}

model Evaluation {
  id                 String              @id @default(cuid()) @db.VarChar(25)
  note               Decimal             @db.Decimal(2, 1)
  text               String              @db.VarChar(500)
  date               DateTime?           @default(now()) @db.DateTime(0)
  userId             String              @map("user_id") @db.VarChar(25)
  produitId          String              @map("produit_id") @db.VarChar(25)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  produit            Produit             @relation(fields: [produitId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reponsesEvaluation ReponseEvaluation[]

  @@index([produitId], map: "index_produit_id")
  @@index([userId], map: "index_user_id")
  @@map("evaluation")
}

model Filtre {
  id                     String                @id @default(cuid()) @db.VarChar(25)
  nom                    String                @db.VarChar(100)
  valeur                 String                @db.VarChar(100)
  filtresProduits        FiltreProduit[]
  filtresLignesPaniers   FiltreLignePanier[]
  filtresLignesCommandes FiltreLigneCommande[]

  @@map("filtre")
}

model FiltreLigneCommande {
  filtreId        String        @map("filtre_id") @db.VarChar(25)
  ligneCommandeId String        @map("ligne_commande_id") @db.VarChar(25)
  filtre          Filtre        @relation(fields: [filtreId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ligneCommande   LigneCommande @relation(fields: [ligneCommandeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([filtreId, ligneCommandeId])
  @@map("filtre_ligne_commande")
}

model FiltreLignePanier {
  filtreId      String      @map("filtre_id") @db.VarChar(25)
  lignePanierId String      @map("ligne_panier_id") @db.VarChar(25)
  filtre        Filtre      @relation(fields: [filtreId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lignePanier   LignePanier @relation(fields: [lignePanierId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([filtreId, lignePanierId])
  @@map("filtre_ligne_panier")
}

model FiltreProduit {
  filtreId  String  @map("filtre_id") @db.VarChar(25)
  produitId String  @map("produit_id") @db.VarChar(25)
  filtre    Filtre  @relation(fields: [filtreId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  produit   Produit @relation(fields: [produitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([filtreId, produitId])
  @@map("filtre_produit")
}

model LigneCommande {
  id                     String                @id @default(cuid()) @db.VarChar(25)
  nomProduit             String                @map("nom_produit") @db.VarChar(100)
  quantite               Int
  prixUnit               Decimal               @map("prix_unit") @db.Decimal(10, 2)
  imageUrl               String?               @map("image_url") @db.VarChar(255)
  commandeId             String                @map("commande_id") @db.VarChar(25)
  produitId              String?               @map("produit_id") @db.VarChar(25)
  commande               Commande              @relation(fields: [commandeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  produit                Produit?              @relation(fields: [produitId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  filtresLignesCommandes FiltreLigneCommande[]

  @@index([commandeId], map: "index_commande_id")
  @@index([produitId], map: "index_produit_id")
  @@map("ligne_commande")
}

model LignePanier {
  id                   String              @id @default(cuid()) @db.VarChar(25)
  nomProduit           String              @map("nom_produit") @db.VarChar(100)
  quantite             Int
  prixUnit             Decimal             @map("prix_unit") @db.Decimal(10, 2)
  imageUrl             String?             @map("image_url") @db.VarChar(255)
  panierId             String              @map("panier_id") @db.VarChar(25)
  produitId            String?             @map("produit_id") @db.VarChar(25)
  panier               Panier              @relation(fields: [panierId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  produit              Produit?            @relation(fields: [produitId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  filtresLignesPaniers FiltreLignePanier[]

  @@index([panierId], map: "index_panier_id")
  @@index([produitId], map: "index_produit_id")
  @@map("ligne_panier")
}

model Notification {
  id             String    @id @default(cuid()) @db.VarChar(25)
  objet          String?   @db.VarChar(255)
  text           String?   @db.VarChar(1000)
  date           DateTime? @default(now()) @db.DateTime(0)
  urlRedirection String?   @map("url_redirection") @db.VarChar(255)
  estLu          Boolean?  @default(false) @map("est_lu")
  userId         String?   @map("user_id") @db.VarChar(25)
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "index_user_id")
  @@map("notification")
}

model PaiementCommande {
  id         String          @id @default(cuid()) @db.VarChar(25)
  date       DateTime?       @default(now()) @db.DateTime(0)
  statut     PaiementStatut? @default(EN_ATTENTE)
  commandeId String          @map("commande_id") @db.VarChar(25)
  commande   Commande        @relation(fields: [commandeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([commandeId], map: "index_commande_id")
  @@map("paiement_commande")
}

model PaiementVendeur {
  id        String          @id @default(cuid()) @db.VarChar(25)
  montant   Decimal         @db.Decimal(10, 2)
  date      DateTime?       @default(now()) @db.DateTime(0)
  statut    PaiementStatut? @default(EN_ATTENTE)
  vendeurId String          @map("vendeur_id") @db.VarChar(25)
  vendeur   Vendeur         @relation(fields: [vendeurId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([vendeurId], map: "index_vendeur_id")
  @@map("paiement_vendeur")
}

model Panier {
  id               String        @id @default(cuid()) @db.VarChar(25)
  statut           PanierStatut? @default(EN_COURS)
  dateCreation     DateTime?     @default(now()) @map("date_creation") @db.DateTime(0)
  dateModification DateTime?     @map("date_modification") @db.DateTime(0)
  userId           String        @map("user_id") @db.VarChar(25)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  commandes        Commande[]
  lignesPanier     LignePanier[]

  @@index([userId], map: "index_user_id")
  @@map("panier")
}

model Produit {
  id                 String              @id @default(cuid()) @db.VarChar(25)
  nom                String              @db.VarChar(100)
  objet              String?             @db.VarChar(255)
  description        String?             @db.VarChar(1000)
  prix               Decimal             @db.Decimal(10, 2)
  qteStock           Int                 @map("qte_stock")
  noteMoyenne        Decimal?            @default(0.0) @map("note_moyenne") @db.Decimal(2, 1)
  totalNotations     Int?                @default(0) @map("total_notations")
  imageUrl           String?             @map("image_url") @db.VarChar(255)
  dateCreation       DateTime?           @default(now()) @map("date_creation") @db.Timestamp(0)
  dateModification   DateTime?           @default(now()) @map("date_modification") @db.Timestamp(0)
  categorieId        String?             @map("categorie_id") @db.VarChar(25)
  produitBoutique    ProduitBoutique?
  produitMarketplace ProduitMarketplace?
  categorie          Categorie?          @relation(fields: [categorieId], references: [id], onUpdate: NoAction)
  filtresProduit     FiltreProduit[]
  lignesCommande     LigneCommande[]
  lignesPanier       LignePanier[]
  evaluations        Evaluation[]
  signalements       Signalement[]

  @@index([categorieId], map: "index_categorie_id")
  @@index([qteStock], map: "index_qte_stock")
  @@map("produit")
}

model ProduitBoutique {
  produitId   String  @id @map("produit_id") @db.VarChar(25)
  fournisseur String? @db.VarChar(255)
  produit     Produit @relation(fields: [produitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("produit_boutique")
}

model ProduitMarketplace {
  produitId String  @id @map("produit_id") @db.VarChar(25)
  vendeurId String  @map("vendeur_id") @db.VarChar(25)
  produit   Produit @relation(fields: [produitId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vendeur   Vendeur @relation(fields: [vendeurId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([vendeurId], map: "index_vendeur_id")
  @@map("produit_marketplace")
}

model ReponseEvaluation {
  id           String     @id @default(cuid()) @db.VarChar(25)
  text         String     @db.VarChar(500)
  date         DateTime?  @default(now()) @db.DateTime(0)
  userId       String     @map("user_id") @db.VarChar(25)
  evaluationId String     @map("evaluation_id") @db.VarChar(25)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("reponse_evaluation")
}

model Signalement {
  id        String             @id @default(cuid()) @db.VarChar(25)
  objet     String?            @db.VarChar(255)
  text      String?            @db.VarChar(1000)
  statut    SignalementStatut? @default(EN_ATTENTE)
  date      DateTime?          @default(now()) @db.DateTime(0)
  clientId  String?            @map("client_id") @db.VarChar(25)
  produitId String?            @map("produit_id") @db.VarChar(25)
  client    Client?            @relation(fields: [clientId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  produit   Produit?           @relation(fields: [produitId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([clientId], map: "index_client_id")
  @@index([produitId], map: "index_produit_id")
  @@map("signalement")
}

model User {
  id                 String              @id @default(cuid()) @db.VarChar(25)
  email              String              @unique(map: "unique_email") @db.VarChar(255)
  password           String              @db.VarChar(255)
  nom                String?             @db.VarChar(100)
  prenom             String?             @db.VarChar(100)
  tel                String?             @db.VarChar(20)
  adresseId          String?             @map("adresse_id") @db.VarChar(25)
  urlImage           String?             @map("url_image") @db.VarChar(255)
  emailVerifie       Boolean?            @default(false) @map("email_verifie")
  dateCreation       DateTime?           @default(now()) @map("date_creation") @db.DateTime(0)
  role               UserRole            @default(CLIENT)
  admin              Admin?
  client             Client?
  adresse            Adresse?            @relation(fields: [adresseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  paniers            Panier[]
  evaluations        Evaluation[]
  notifications      Notification[]
  reponsesEvaluation ReponseEvaluation[]

  @@index([email], map: "index_email")
  @@map("user")
}

model Vendeur {
  id                 String               @id @db.VarChar(25)
  nomAffichage       String?              @map("nom_affichage") @db.VarChar(100)
  rib                String?              @db.VarChar(50)
  client             Client               @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  paiementVendeur    PaiementVendeur[]
  produitMarketplace ProduitMarketplace[]

  @@map("vendeur")
}

enum PanierStatut {
  EN_COURS
  VALIDE
  ANNULE
}

enum PaiementStatut {
  EN_ATTENTE
  VALIDE
  ECHOUE
}

enum SignalementStatut {
  EN_ATTENTE
  TRAITE
  REJETE
}

enum CommandeStatut {
  EN_ATTENTE
  EXPEDIEE
  LIVREE
  ANNULEE
}

enum UserRole {
  CLIENT
  VENDEUR
  ADMIN
}
